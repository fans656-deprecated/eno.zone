2017-05-20 16:12:48
[todo]
) file sync API
) mnote
) pastebin
) register new user and post avatar
) book view
) old sina img
) clear search return to all docs
) book read
) leetcode stat

2017-05-21 14:32:56
http://stackoverflow.com/questions/21388921/subdomains-with-flask
handle subdomains in flask

2017-05-22 22:55:59
) implement "command line clip get/post"
    . export /get-cookie by POST username/password
    . curl -H 'application/json' -X POST -d '{"username": "foo", "password: "bar"}' https://fans656.me/api/get-cookie

    ) (depracated)understand API key mechanism

2017-06-11 09:11:07
rewrite using react

. about page
. login
. user panel (post blog, etc..)
. post blog editor
. post blog api

2017-06-12 08:45:10
) show post date right bottom
    ) click date for detail view (with comment)
    ) click "edit for edit (auto save)

) comments

2017-06-12 22:26:12
理一下思路：

https://fans656.me/                 => blogs
https://fans656.me/blog             => blogs
https://fans656.me/blog/123         => blog by id
https://fans656.me/blog/123/edit    => blog by id edit

2017-06-18 15:37:41
. post node
    . {"data": "..."}
. get node
    . /api/node/5
    . get node list
    . by ref
. delete node by id
. put node

=== non api
. blog list
. put node (no delete, backup)

2017-06-19 00:45:41
) node literal in links
    {
        "data": "this is content",
        "links": [
            {"rel": "type", "dst": "blog"},
            {"rel": "title", "dst": {
                "data": "this is title"
            }}
        ]
    }

2017-06-21 03:22:23
) upload files
. react context (for `user`)
    dont use context
) refactor into different js

2017-06-23 02:24:20
) diandian blogs
) books
) music
) movies

2017-06-24 01:34:09
http://blog.sina.com.cn/fans656
迁移新浪博客

2017-06-25 04:16:36
今天要把新站上线掉：有点赶，所以只做最必要的那些功能

. all data upload
  . upload diandian-migaration git repo
  . mark old blog
  . change db schema
  . backup db
  . submit post-45 #7
. pagination
) full site regularly backup
) login required post test
# development/production database

2017-06-25 08:15:25
7.html的#45 blog太长，超出了mysql TEXT的长度...
决定暂时用LONGTEXT解决(其实有个MEDIUMTEXT，但先这么用)
以后有空好好思考下存储的问题，LONGTEXT会不会有性能问题

2017-06-26 03:26:31
) pagination input
    can't backspace on page "1"
) node (a more robust lib with file support)
    ) when delete, just mark (can set expire time)
) blog/file ref
) TODO page
    add todos
    categoried by tags (long term, short term...)
    version control

2017-06-28 23:58:03
Functional:
# node (a more robust lib with file support)
    # when delete, just mark (can set expire time)
(reason: use neo4j)

2018-04-30 21:17:24
之前写了几天的stome(storage for fans656.me)的devlog，结果手贱删了
无所谓啦
stome的原型已经就绪，现在想着手更新fme(fans656.me)了
基本打算重写


刚在想，最基本的功能是什么呢？——我是指基础设施
差不多就是custom url + script
可以指定任一url上接到请求后调用哪个脚本
脚本可以放在stome上
然后就可以在此基础上创建出可以执行各种功能的api，还可以更新

2018-05-01 14:14:38
整理一下url对应要做的

    GET /
        index.html
        拉去文章列表，显示文章内容
    PUT /blog
        创建文章
    PUT /blog?id=138
        创建或更新文章

2018-05-01 15:00:44
整理一下use case

plain-text

    this is just a note

markdown

    # this is title
    
    and this is code:
    
        def hello():
            print "hi, world"

gallery

2018-05-03 22:59:59
可以用

    npx babel index.js

来编译jsx文件

2018-05-05 08:34:37
https://github.com/jamesmartin/react-remote-component-demo
动态加载react component

2018-05-05 09:14:16
实验成功，至少可以用window.eval加载动态的component

    import React from 'react';
    import ReactDOM from 'react-dom';
    
    window.React = React;

    $.get('http://ub:8000/T.js', (src) => {
        window.eval(src);
        ReactDOM.render(<T/>, document.getElementById('root'));
    });

感觉这个动态加载component打通了前端这里就不着急了

下来该考虑考虑内容服务——file storage已经打通
另一个就是blog内容了，要有全文搜索的功能
而且编辑的文本跟显示出来的不一定一样，涉及预处理后处理之类的，回头case by case地考虑

2018-05-05 17:51:35
elasticsearch只走了一个tutorial就已经可以满足full-text search的需求了
至于新blog的id，可以每次放之前查一下count

下面可以把现有blog的内容导出来放进es，然后做个full-text search的prototype
过程中可能补一补es的细节

2018-05-05 22:34:26
原fme数据导入的todo:

) /files/...
) sina img
    search "http" or "sina" in note.content

2018-05-07 00:40:43
[usecases]

========================================
direct-english

play small audio/video with lines
playlist
local storage if possible
    js find storage preference for ub
========================================
books read

single book
    cover
    read start/end
    link to douban
    link to txt reader
book list
    how many characters read
    read speed
========================================
movies seen
========================================
leetcode
========================================
av
========================================
learning roadmap

stack
history view

2018-05-07 20:26:14
有点儿懒得重写了，想是不是在原来的基础上修补一下
需要做的有这么几个事儿：
1. 数据库迁移到elasticsearch，为了支持fulltext search
2. 前端加逻辑判断 {'type': '..'} ，支持新的blog类型
3. 写新的React Component，支持新的blog类型
4. 重写backup逻辑，支持备份

2018-05-09 00:25:06
看来elasticsearch不能完全当数据库用：这家伙把field都给analyze了
所以还得搭配数据库，只把文本放在es里
略微看了一眼，似乎mongodb可以：document based, 也有key-value, graph等等

2018-05-10 08:06:18
我靠，mongodb直接可以regex实现全文搜索，速度还不慢——这个比es更适合我的需求哎

2018-05-11 07:42:29
[test]
+ doc
    + post
    + edit
    + delete
+ comment
    + post
        + as me
        + as guest
        + as other
    + delete
    (no edit)
+ user
    + log in
    + log out
    + register
    + avatar
+ custom url
    + edit
    + view
+ search
    + tag
        + edit tag
    + content
+ access control
    + others can't view hidden doc

2018-05-11 22:24:18
. delete comment (now comments belong to blog and has no id)
. bug: es can't match tag '.', relating to text/keyword field
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html

    fixed by switch to mongodb ;p

2018-05-13 00:40:52
. bug: after new/delete blog, the returned list view didn't update

2018-05-13 01:24:30
avail domains:

eno.zone
mnote.me

2018-05-13 15:17:16
. pagination
. post note
. comments
) file storage
) nav theme
) console
) search

2018-05-29 21:40:09
[content to add]
) bank card pics
) jquery.js
) passwords of various sites
    ) sina sae
    ) dns.xsazz.com
    ) vultr
    ) bandwagon
    ) paypal
    ) mails
        yahoo 163 qq gmail

2018-05-30 00:58:13
) js client qiniu upload
    when user select a file to upload,
    upload it to qiniu and then tell vps server
) js service worker to modify http request/response
    so like when page render <img>, js client will intercept the request like
        GET http://res.fans656.me/img/girl.jpg
    and convert it to qiniu requests, got the responses (encrypted chunked data),
    decrypt and merge them into actual image data, and return the new response
    this way for user, the web page just looks normal
    but can speed up access and lift vps server for storage burden

2018-06-06 23:56:41
实现了从stome后端取文件了，可以直接在eno.zone页面上写

    <img src="/res/girl.jpg">

显示图片，new tab也支持，，爽


嗯... 下来好像该实现剪贴板粘贴上传，也是要service worker搞七牛upload
另外，似乎得先实现个好用的editor

2018-06-11 21:49:41
https://stackoverflow.com/questions/37525867/how-can-i-add-a-new-format-hr-tag-to-quill-js
quill自定义embed

2018-06-18 01:38:24
放弃quill——起因在于发现居然不能方便地设置图片的大小，试了试深度定制未果，弃之
自己动手撸了一个vim的雏形出来，，感觉很有前景

开始是按富文本编辑器来做的，写了一段发现太复杂搞不定——js不熟react不熟，太多未知技术问题
然后简化为纯文本，虽然期间也各种技术难题，但一一攻克走到了现在
已经是一个基本可用的vim，自定义各种功能(比如图片、公式预览)也不难开发
目前的代码是针对eno.zone来做的，按道理更应该做成general的编辑器，然后定制成业务相关
不过这第一次趟水，先把技术走通，以后如果有机会再重写——而且这次开发eno.zone也是pratical导向，尽快出可用的版本是正果

希望一个月能把eno.zone (+stome)的主要功能都搭起来吧，遗留一些minor issue可以慢慢修补——自己的个人站得先可用起来


哦对，忘了说，，做js edi也是因为markdown不能满足需求，比如图片大小、可点击，，以及数学公式
还有就是最蛋疼的想要有空白行必须多空一行，或者反直觉的行位两个空格
自己定义一个eno格式，可以用自己觉得最方便的写法
加上edi的仿vim编辑，一个文本框解决content和meta的同时处理


2018-06-19 00:13:06
把stome集成到eno.zone里了，因为要共用前端七牛上传的部分
于是把devlog也挪到这里

============================================================= stome devlog
2018-04-25 08:00:50
. upload with mime-type
. upload large file

2018-04-26 20:56:37
. download large file

2018-04-29 22:44:52
. video stream

实验HLS(HTTP Live Streaming)成功，可以在线播放视频
之后就是把API完善下，测试完备
再支持上七牛云的存储
然后就可以做网站了

2018-05-01 09:29:39
发现支持一下rsync也很不错
fans656.me提供package上传功能，那么整个package的上传用rsync来做，就可以在命令行一下子传上去一个文件夹


) frontend renamed upload
) delete file
) auth server
) frontend user login

2018-05-16 23:27:20

***** below is thinking about file uploading

PUT /img/girl.jpg
{
    'size': 2073,
    'part-size': 128,
    'part-beg': 1024,
    'start': true,
}

[empty/done => uploading]

    create/truncate file with name md5(path) for writing

when all part is verified

[uploading => storing]

    initiate store process

when any storage is done

[storing => done]


============================= md5(path) file deletion

when a storing process is done or failed
storing count +1
when storing_count == total_storage_count
delete the md5(path) file

============================= storage process

----------------------------- local

[init => storing]

    copy file to path

[storing => done]

----------------------------- qiniu

[init => encrypting]

    create file 'qiniu-encrypting' + md5(path) for writing

when done writing

[encrypting => uploading]

    upload the file to qiniu

[upload => done]

===================== tech issues

1. [done] How to manage process/thread execution
2. [done] How to partly update mongodb document
3. How to upload to qiniu

2018-05-30 07:52:16
) js split and encrypt and upload to qiniu

2018-05-30 09:52:24
http://dns.xsazz.com/
用这个网站的备案二级域名绑了七牛云

2018-05-30 20:49:38
) create upload token

2018-06-05 00:43:01
总算把很核心的一个东西给弄好了：七牛云上传与下载
期间各种蛋疼——HTTPS、绑定备案域名、文件混淆、client下载、service worker
anyway, 总是解决了，，以后是不是真的可用再说吧，测试域名+存2T东西其实挺贵的每个月

2018-06-05 19:19:07
打开new tab时如果用不同的origin那么service worker就截不下请求
所以看样子需要只用一个后端，，用service worker截到的fetch请求这个样子：

    https://ub:3000/static/js/bundle.js
    https://ub:6001/?depth=1
    https://ub:6001/home?depth=1
    https://ub:3000/static/media/file.54eb6ec9.png

访问分为三种：
1. get ui

    GET https://res.eno.zone/
    GET https://res.eno.zone/home

2. get file

    GET https://res.eno.zone/home/fans656/img/girl.jpg

3. api

    GET https://res.eno.zone/?op=ls
    GET https://res.eno.zone/?op=meta
    GET https://res.eno.zone/home/fans656/img/girl.jpg?op=meta

    PUT https://res.eno.zone/home
    POST https://res.eno.zone/home
    DELETE https://res.eno.zone/home
    (non-get requests defaults to api)

4. static resource

    GET https://res.eno.zone/static/js/bundle.js

总结一下

    if method == GET:
        if path.startswith('static/'):
            return <static-resource>
        elif has_query(url):
            return <api>
        elif is_dir(path):
            return <ui>
        else:
            return <file-content>
    else:
        return <api>
============================================================= stome devlog end

2018-06-19 00:14:22
不知觉写了这一两个月，代码竟然已经到12000行了，，全部写完不知道要多少

2018-06-19 01:03:19
整理一下集成了stome之后的api
所有stome相关的请求都在 /res/... 下面

资源请求 GET /res/girl.jpg
    curl类型的会直接从服务器取数据
    browser的如果没注册service worker也会直接从服务器取
    如果有service worker，会intercept所有 /res/... 的请求
        先发meta query，如果有qiniu的存储，优先去qiniu取，前端unencrypt
        如果没有qiniu，再从服务器取
对于文件夹类型的请求 GET /res/img，服务器判断是文件夹后返回bundle.js，前端渲染UI，然后 GET /res/img?op=ls 拿meta
其他api的请求都带着op参数或者method就能判断，比如
    POST /res/SIRO-1690.wmv
    DELETE /res/img/girl.jpg
哦，文件上传，，
    直接POST的话就是往服务器传，然后服务器可以负责向其他storage分发
    前端发起的话，会先touch文件，然后根据meta决定是否自行上传qiniu——如果有server-local，就也往服务器传

还有，下载的话如果文件没有server-local-storage，server会去qiniu取，cache下来，然后响应请求

对智能终端的区分就是，
    如果直接GET文件，说明是curl型的傻终端，只好服务器服务
    如果先GET meta，说明有智能，之后终端自行去别地儿取也行，还是坚持向服务器GET文件也行
应该加一个用户设置，优先去哪种storage取，，国内就可以设置成qiniu，国外就是vps——或者自动根据ip判断？

2018-06-21 00:33:11
这两天算是又完成了几个技术难题
一是把stome集成进来了
二是搞定了用react-scripts + webpack来编译service worker
然后今天一天晚上搞出了paste image的prototype

发觉未写完的edi用起来就遇到各种需求，vim的各种键
公交上没什么环境的时候要不就慢慢补完edi的各种未完成吧

现在整个项目分成了几大块儿，eno.zone一个，stome一个，edi一个，，相互还算独立
多会儿能写完呢？感觉六月还是不行~~~

2018-06-21 19:53:44
edi这么写下去感觉会很乱，有必要整理一下vim的各种操作的细节，然后实现一些基础功能，从一开始就支持history之类
然后用起来会顺手得多，也不会实现业务的过程中引入那么多bug

毕竟.. 目前一个 edi.js 已经1400行了呃，，这不是好兆头

2018-06-21 23:27:16
既然要重构(写)，不禁想要不要尝试一下富文本呢？

可以有图片、公式、代码、音乐、视频，以及自定义的控件(html+js)
这样能做好的话，比如之后的记账，也可以做成控件，然后vim操作

2018-06-21 23:59:23
上面说的富文本自定义控件的case，想到一个可以用作prototype的：
在文本里嵌入一个推箱子的控件，hljk移动到上面时，可以i键激活，然后hljk控制小人移动，<c-k> deactivate，继续hljk去别的text
哎，推箱子好像难了点，贪吃蛇怎么样？

哦对，今天要干的还是先不写代码，把各种操作都仔细描述一下，看看有什么遗漏的细节

另一个use case是移动或click上去可以直接激活的控件

2018-06-22 07:46:02

::: edi design :::

Navigation - prefix with <count>
    h       Caret left
    l       Caret right
    k       Caret up
    j       Caret down
    w       Word right
    e       Word end right
    b       Word left
    H       Caret head
    L       Caret tail

    M       Go to match paren/bracket/quote/...
    
    zz      Put current line center
    zt      Put current line top
    zb      Put current line bottom
            
    ------- will not push position marks

    gg      Go to first line
    G       Go to last line

    ------- will not push position marks

    <c-o>   Jump back
    <c-i>   Jump forward


Modification - prefix with <count>
    ~       Change case
    <c-a>   Increment
    <c-x>   Decrement
    x       Delete char
    J       Join with next line

d-/c-/y-
    <count> h/l/j/k/w/b/e/gg/G
    i-/a-
        w/(/[/{/'/"/`

    dd  Delete line
    D   Delete line after
    cc  Change line
    C   Change line after

Prefix type
    <count>         23
    <register>      "a

History
    change history - only content change
    action history - all actions
    
    note normal insert mode history is more fine-grained

Macro
    record key strokes

Highlight

Block Visual Insert

Search

Replace

Custom command
    normal
    insert
    command

Line wrap
    no wrap
    wrap with jk on soft line

Custom applet
    auto activate on navigate / click
        horz elems count into out horz elems
        vert elems does not count (if out has horz elems?)
        line number?
    i to activate
    <esc> to force deactivate
    read-only

Line number

Status bar

Read only mode

Usage in comment edit

Auto richable elements
    *italic*
    **strong**
    `inline-code`
    ``inline-formula``
    
    auto detected block code?

Manual richable elements
    
    # py
    def run():
        return 'runned'

    // c
    void main() {
        printf("hello world\n");
    }
    
    // cpp
    void main() {
        cout << "hi" << endl;
    }
    
    // js
    void main() {
        cout << "hi" << endl;
    }

Toolbar

Placeholder (for comment edit)

==================================================================

Surface
    caret
    text
    history
    selection
    positions

==================================================================

Key state machine

[<count>] <operation> [[<count>] <move> [<target>]]

<operation>

    d Deletion
    D Line deletion

    y Yank
    Y Line yank
    
    c Change
    C Line change
    
    p Paste
    P Paste before
    
    a Append
    A Append end
    
    i Insert
    I Insert head
    
    o Insert next line
    O Insert prev line

    m Mark

<move>
    
    h
    l
    j
    k
    w
    e
    b
    H
    L
    gg
    G
    M
    ' Goto mark

<operation>
    D
    H
    L

[<count>] <operation>
    G

<operation> <target>
    gg
    yy
    cc

[<count>] <operation> [count] <move>
    dw
    yb

[<count>] <operation> [count] <move-ext> [<target>]
    diw
    ci<
    ya"

[<count>]

==================================================================

History

input change history

    i/I/a/A
        save caret
        record input change
        push history on escape
    o/O
        save caret
        push line insert operation, squash=1
        record input change
        push history on escape and squash
    s/S
        save caret
        push char deletion operation, squash=1
        record input change
        push history on escape and squash
    cc/C
        save caret
        push change operation, squash=1
        record input change
        push history on escape and squash
    cw/ca[/...
        save caret
        push change operation, squash=1
        record input change
        push history on escape and squash

input change

    {
        caret: {row: 23, col: 15},
        deleteBeforeCount: 'foo',
        text: 'hello',
        deleteAfterCount: 'bar',
    }
    
    undo:

normal change history

    x

==================================================================

::: edi designend :::

2018-06-22 08:25:35
看样子，要不先做出insert mode的rich editor？是为了让别人也能用eno.zone

2018-06-22 09:33:31
有一个use case强烈需要rich support：
画图
比如时序图、流程图
总之是各种交互操作比直接编辑文字更容易的applets

2018-06-24 11:59:29
加上highlights和selection后，line需要一个intervals的structure

    class Spans:
        add(beg, end, data)
        remove(beg, end)
        get(beg, end)

2018-06-24 17:54:02
整理一下inserText和deleteText的操作

input mode
    normal chars (abcde...)
        > [rows, cols] = insertText(row, col, 'a')
        > caret.incRow(rows - 1).incCol(cols)
    ime text
        > [rows, cols] = insertText(row, col, '比如')
        > caret.incRow(rows).incCol(cols)
    paste text (ctrl-v)
        > [rows, cols] = insertAfter(row, col, 'foo\nbar')
        > caret.incRow(rows).incCol(cols)
    enter
        > insertLine(row + 1, line(row).leadingSpaces())
        > caret.incRow(1).toLastCol()
    backspace
        not beginning
            > deleteChar(row, col - 1)
            > caret.decCol(1)
        beginning
            not first row
                > caret.decRow(1).toLastCol()
                > line(row).joinNext(1)
            first row
                > noop
    delete
        not end
            > deleteChar(row, col)
        end
            not last row
                > line(row).joinNext(1)
            last row
                > noop
normal mode
    o
        > insertLine(row + 1, line(row).leadingSpaces())
        > caret.incRow(1).toLastCol()
    O
        > insertLine(row, line(row).leadingSpaces())
        > caret.toLastCol()
    p
        > [rows, cols] = insertAfter(row, col, text)
        > if (rows === 1)
            > caret.incCol(cols - 1)
        > else
            > caret.incRow(rows - 1).setCol(cols - 1)
    P
        > [rows, cols] = insertBefore(row, col, text)
        > caret.decRow(rows - 1).

2018-06-25 00:22:00
content那部分又乱掉了，得好好想想

Content

    rows() => 4

    firstRow() => 0

    lastRow() => 3

    line(row) => Line
    
    text(begRow, begCol, endRow, endCol) => 'foo\nbar'
    
    insertText(row, col, text) => addedRows, lastAddedCols
    
    insertLine(row, text)
    
    insertChar(row, col, ch)
    
    deleteText(begRow, begCol, endRow, endCol) => deletedText
    
    deleteLine(row) => deletedLine
    
    deleteChar(row, col) => deletedChar
    
    joinLines(row, count) => joinedLine
    
    setAttr(begRow, begCol, endRow, endCol)
    
    search(pattern)
    
    replace(pattern, func_or_string)
    
    replace(begRow, begCol, endRow, endCol, string)

Line

    text(beg, end)
    
    spans(beg, end)

    insert(col, text)

    del(beg, end)
    
    split(col)

    setAttr(beg, end, attr)

2018-06-25 19:45:55

Spans.setAttrs(begCol, endCol) 需要拿到跟 begCol, endCol intersect的span

    begCol好说，只要 beg <= begCol < end 就行
    endCol需要 beg < endCol <= end

Spans.split(col)

    beg < col < end - 1
        split span into two spans
    beg == col

2018-06-26 09:52:03
整理一下delete的操作，主要是涉及caret变化

    x
        line empty
            > noop
        not end
            > deleteChar(row, col)
        end
            > deleteChar(row, col)
            > caret.decCol(1)

2018-07-02 22:45:18
可以用 ;m 切换编辑 content/meta
这样就不需要支持什么 own: content 的 app
直接 meta

    type: balance

区别就是直接使用content的都用meta type
audio/video这些数据可以放在app里的用app


一个note可以有多种形态
比如书：

    在note list里的时候显示封面、评分，和个人评价
    
    single view的时候就是一个阅读器
    
    在shelf note里头就是一个封面——一个note可以引用别的note，并调用它们的不同render
    
    shelfs会引用别的shelf——比如科幻类、小说类、etc...

note可以请求后端api，所以可以有各种整合类的note，比如整合所有tag是av的note，tag是凡尔纳的note...
这样的整合类note不必编辑内容，它的内容会根据整个enos的变动而变动
